{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","amonster","id","style","width","height","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","Response","json","users","this","filteredMonsters","filter","each_monster","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8MAAAA,EAAOC,QAAU,IAA0B,kC,uJCE9BC,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,aAAaC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,aAAwDC,MAAO,CAACC,MAAM,IAAKC,OAAO,OAC3G,4BAAKR,EAAMI,SAASK,MACpB,2BAAIT,EAAMI,SAASM,UCFdC,G,MAAW,SAAAX,GAAK,OAGrB,yBAAKC,UAAU,aACVD,EAAMY,SAASC,KAAI,SAAAT,GAAQ,OACxB,kBAAC,EAAD,CAAMU,IAAKV,EAASC,GAAID,SAAUA,UCLrCW,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIhB,UAAU,SACViB,KAAK,SACLF,YAAaA,EAEbG,SAAUF,MC4FHG,G,kBA/Fb,aAAc,IAAD,8BACX,+CA6BFH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA7BrC,EAAKC,MAAQ,CACXd,SAAU,GAcVW,YAAa,IAjBJ,E,iFAwBO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,+BAMhC,MAGwBC,KAAKN,MAA7Bd,EAHA,EAGAA,SAAUW,EAHV,EAGUA,YAIXU,EAAkBrB,EAASsB,QAAO,SAAAC,GAAY,OAClDA,EAAa1B,KAAK2B,cAAcC,SAASd,EAAYa,kBAEvD,OACE,yBAAKnC,UAAU,OACb,gDAMA,kBAAC,EAAD,CACEe,YAAY,kBAEZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUL,SAAUqB,S,GAzDVK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.dd1b29d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"img broken\" src={`https://robohash.org/${props.amonster.id}?set=set2`} style={{width:180, height:180}}/>\r\n        <h2>{props.amonster.name}</h2>\r\n        <p>{props.amonster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css';\r\n// export 将会从模块中导出函数/对象/或值以便其他函数使用\r\nexport const CardList = props => (\r\n        \r\n        //it's going to return every element in the array. amonster是array中的每个元素所指代的变量物件，所以拥有.property  prop是obj ，所以可以用.来调用其中元素\r\n        <div className='card-list'>\r\n            {props.monsters.map(amonster =>(\r\n                <Card key={amonster.id} amonster={amonster} />\r\n            ))}\r\n        </div>\r\n        \r\n    );\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n    <input \r\n        className='search'\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        //onChange={e=>{this.setState({ searchField:e.target.value})}}\r\n        onChange={handleChange}\r\n         />\r\n)","import React,{Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport logo from './logo.svg';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n// 曲线括号中均是js的表达式\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = { //state就是javascript的object\n      monsters: [\n        // {\n        //   name: 'Frankenstein',\n        //   id: 'asc1'\n        // },\n        // {\n        //   name: 'Dracula',\n        //   id: 'asr2'\n        // },\n        // {\n        //   name: 'Zombie',\n        //   id: 'as1w'\n        // }\n      ],\n      searchField: ''\n    };\n    //the below two lines of comment indicates how to create class method\n    //这是解决 “this” is not defined的办法 *** for every new class method that we write we have to bind it. The Better way is to use the arrow function, it allows you to define \"this\" when whole thing is defined\n    // this.handleChange = this.handleChange.bind(this);\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(Response =>Response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n  //in this way, using the arrow function will solve the binding problem of \"this not defined\" \n  handleChange=(e) => {\n    this.setState({searchField: e.target.value});\n  }\n  render() {\n    //我们直接在render中实现过滤功能，最后return中直接返回filteredMonsters\n    //this.state is the object that we want to actually pull properties from. 此处const变量的名字必须保持与原state中一致！\n    const {monsters, searchField }=this.state;\n    //the code above means the same thing as:\n    //const mymonsters=this.state.monsters;\n    //const mysearchField=this.state.seatchField;\n    const filteredMonsters= monsters.filter(each_monster=>\n      each_monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return(\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        {/* e代表synthetic event, 即用户在搜索栏中打字或者remove动作之类的 onchange represents all the changes happened in the search box*/}\n        {/* <input type=\"search\"\n         placeholder=\"search monster\" \n         onChange={e=>{this.setState({ searchField:e.target.value})}} /> */}\n        {/* 传入monsters的时候，已经将其变为一个obj monsters={this.state.monsters} */}\n        <SearchBox\n          placeholder='search monsters'\n         // handleChange={e=>{this.setState({ searchField:e.target.value})}}\n          handleChange={this.handleChange}\n         />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n  // render(){\n  //   return (\n  //     <div className=\"App\">\n  //     <header className=\"App-header\">\n  //         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //         <p>{this.state.string}</p>\n  //          {/* an anonymous function using the arrow syntax to call the this.setState  */}\n  //          {/* You are not allowed to modify the state without using the method \"setState\" */}\n  //         <button onClick={()=>this.setState({string:'Hello shenxinyu'})}>ChangeText</button> \n  //       </header>\n  //     </div>\n  //   );\n  // }\n}\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Hello, my name is ppap\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}